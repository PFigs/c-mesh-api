/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_WP_CONFIG_MESSAGE_PB_H_INCLUDED
#define PB_WP_CONFIG_MESSAGE_PB_H_INCLUDED
#include <pb.h>
#include "wp_global.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _wp_NodeRole_BaseRole {
    wp_NodeRole_BaseRole_SINK = 1,
    wp_NodeRole_BaseRole_ROUTER = 2,
    wp_NodeRole_BaseRole_NON_ROUTER = 3
} wp_NodeRole_BaseRole;

typedef enum _wp_NodeRole_RoleFlags {
    wp_NodeRole_RoleFlags_LOW_LATENCY = 1,
    wp_NodeRole_RoleFlags_AUTOROLE = 2
} wp_NodeRole_RoleFlags;

/* Struct definitions */
typedef struct _wp_NodeRole {
    wp_NodeRole_BaseRole role;
    pb_size_t flags_count;
    wp_NodeRole_RoleFlags flags[2];
} wp_NodeRole;

typedef struct _wp_AccessCycleRange {
    uint32_t min_ms;
    uint32_t max_ms;
} wp_AccessCycleRange;

typedef struct _wp_ChannelRange {
    uint32_t min_channel;
    uint32_t max_channel;
} wp_ChannelRange;

typedef PB_BYTES_ARRAY_T(80) wp_AppConfigData_app_config_data_t;
typedef struct _wp_AppConfigData {
    uint32_t diag_interval_s; /* Diagnostics interval in seconds */
    wp_AppConfigData_app_config_data_t app_config_data; /* App config data */
    uint32_t seq;
} wp_AppConfigData;

typedef struct _wp_NetworkKeys {
    pb_byte_t cipher[16];
    pb_byte_t authentication[16];
} wp_NetworkKeys;

typedef struct _wp_SinkReadConfig {
    /* Local id to uniquely identify a sink on gateway */
    char sink_id[16];
    /* Sink minimal config */
    bool has_node_role;
    wp_NodeRole node_role;
    bool has_node_address;
    uint32_t node_address;
    bool has_network_address;
    uint64_t network_address;
    bool has_network_channel;
    uint32_t network_channel;
    bool has_app_config;
    wp_AppConfigData app_config;
    bool has_channel_map;
    uint32_t channel_map;
    bool has_are_keys_set;
    bool are_keys_set;
    bool has_current_ac_range;
    wp_AccessCycleRange current_ac_range;
    /* Read only parameters */
    bool has_ac_limits;
    wp_AccessCycleRange ac_limits;
    bool has_max_mtu;
    uint32_t max_mtu;
    bool has_channel_limits;
    wp_ChannelRange channel_limits;
    bool has_hw_magic;
    uint32_t hw_magic;
    bool has_stack_profile;
    uint32_t stack_profile;
    bool has_app_config_max_size;
    uint32_t app_config_max_size;
    bool has_firmware_version;
    wp_FirmwareVersion firmware_version;
    /* State of sink */
    bool has_sink_state;
    wp_OnOffState sink_state;
    /* Scratchpad info for the sink */
    bool has_stored_scratchpad;
    wp_ScratchpadInfo stored_scratchpad;
    bool has_stored_status;
    wp_ScratchpadStatus stored_status;
    bool has_stored_type;
    wp_ScratchpadType stored_type;
    bool has_processed_scratchpad;
    wp_ScratchpadInfo processed_scratchpad;
    bool has_firmware_area_id;
    uint32_t firmware_area_id;
    bool has_target_and_action;
    wp_TargetScratchpadAndAction target_and_action; /* Unset if sink doesn't support it */
} wp_SinkReadConfig;

typedef struct _wp_SinkNewConfig {
    /* Local id to uniquely identify a sink on gateway */
    char sink_id[16];
    /* Node minimal config */
    bool has_node_role;
    wp_NodeRole node_role;
    bool has_node_address;
    uint32_t node_address;
    bool has_network_address;
    uint64_t network_address;
    bool has_network_channel;
    uint32_t network_channel;
    bool has_app_config;
    wp_AppConfigData app_config;
    bool has_channel_map;
    uint32_t channel_map;
    bool has_keys;
    wp_NetworkKeys keys;
    bool has_current_ac_range;
    wp_AccessCycleRange current_ac_range;
    /* State of sink */
    bool has_sink_state;
    wp_OnOffState sink_state;
} wp_SinkNewConfig;

typedef struct _wp_GatewayInfo {
    /* Current timestamp when GatewayInfo is generated
 It is a unix timestamp in s since epoch */
    uint64_t current_time_s_epoch;
    /* Optional gateway name (gateway manufacturer specific) */
    bool has_gw_model;
    char gw_model[64];
    /* Optional gateway version (gateway manufacturer specific) */
    bool has_gw_version;
    char gw_version[32];
    /* API version implemented in the gateway
 This field must be explicitly set from code and must be
 the one defined in each released version.
 Current version is 2
 Version 1: Initial release
 Version 2: Addition of setScratchpadTargetAndAction
 It should be replaced by a feature list */
    bool has_implemented_api_version;
    uint32_t implemented_api_version;
    /* Maximun scratchpad size supported by gateway
 If scratchpad is bigger than the size specified,
 it must be sent as chunk. If not set, it means that
 scratchpad can be sent in a single request */
    bool has_max_scratchpad_size;
    uint32_t max_scratchpad_size;
} wp_GatewayInfo;

/* Commands definition */
typedef struct _wp_StatusEvent {
    wp_EventHeader header;
    /* Wirepas Gateway's protobuff message definition version
 This field is used to represent the version of the
 protobuff messages as a whole implemented by the
 gateway. Any breaking change in the message definition
 must lead to an increment of the version's value reported */
    uint32_t version;
    wp_OnOffState state;
    /* Current Gateway config in the status to avoid client asking for it
 Each time config is changed on a gateway, this status must be updated */
    pb_size_t configs_count;
    wp_SinkReadConfig configs[1];
    /* Optional gateway name (gateway manufacturer specific) */
    bool has_gw_model;
    char gw_model[64];
    /* Optional gateway version (gateway manufacturer specific) */
    bool has_gw_version;
    char gw_version[32];
    /* See GatewayInfo for details of this field */
    bool has_max_scratchpad_size;
    uint32_t max_scratchpad_size;
} wp_StatusEvent;

typedef struct _wp_GetConfigsReq {
    wp_RequestHeader header;
} wp_GetConfigsReq;

typedef struct _wp_GetConfigsResp {
    wp_ResponseHeader header;
    pb_size_t configs_count;
    wp_SinkReadConfig configs[1]; /* Gateway may have multiple sinks */
} wp_GetConfigsResp;

typedef struct _wp_SetConfigReq {
    wp_RequestHeader header;
    wp_SinkNewConfig config;
} wp_SetConfigReq;

typedef struct _wp_SetConfigResp {
    wp_ResponseHeader header;
    /* Send back the current config */
    wp_SinkReadConfig config;
} wp_SetConfigResp;

typedef struct _wp_GetGwInfoReq {
    wp_RequestHeader header;
} wp_GetGwInfoReq;

typedef struct _wp_GetGwInfoResp {
    wp_ResponseHeader header;
    wp_GatewayInfo info;
} wp_GetGwInfoResp;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _wp_NodeRole_BaseRole_MIN wp_NodeRole_BaseRole_SINK
#define _wp_NodeRole_BaseRole_MAX wp_NodeRole_BaseRole_NON_ROUTER
#define _wp_NodeRole_BaseRole_ARRAYSIZE ((wp_NodeRole_BaseRole)(wp_NodeRole_BaseRole_NON_ROUTER+1))

#define _wp_NodeRole_RoleFlags_MIN wp_NodeRole_RoleFlags_LOW_LATENCY
#define _wp_NodeRole_RoleFlags_MAX wp_NodeRole_RoleFlags_AUTOROLE
#define _wp_NodeRole_RoleFlags_ARRAYSIZE ((wp_NodeRole_RoleFlags)(wp_NodeRole_RoleFlags_AUTOROLE+1))

#define wp_NodeRole_role_ENUMTYPE wp_NodeRole_BaseRole
#define wp_NodeRole_flags_ENUMTYPE wp_NodeRole_RoleFlags





#define wp_SinkReadConfig_sink_state_ENUMTYPE wp_OnOffState
#define wp_SinkReadConfig_stored_status_ENUMTYPE wp_ScratchpadStatus
#define wp_SinkReadConfig_stored_type_ENUMTYPE wp_ScratchpadType

#define wp_SinkNewConfig_sink_state_ENUMTYPE wp_OnOffState


#define wp_StatusEvent_state_ENUMTYPE wp_OnOffState








/* Initializer values for message structs */
#define wp_NodeRole_init_default                 {_wp_NodeRole_BaseRole_MIN, 0, {_wp_NodeRole_RoleFlags_MIN, _wp_NodeRole_RoleFlags_MIN}}
#define wp_AccessCycleRange_init_default         {0, 0}
#define wp_ChannelRange_init_default             {0, 0}
#define wp_AppConfigData_init_default            {0, {0, {0}}, 0}
#define wp_NetworkKeys_init_default              {{0}, {0}}
#define wp_SinkReadConfig_init_default           {"", false, wp_NodeRole_init_default, false, 0, false, 0, false, 0, false, wp_AppConfigData_init_default, false, 0, false, 0, false, wp_AccessCycleRange_init_default, false, wp_AccessCycleRange_init_default, false, 0, false, wp_ChannelRange_init_default, false, 0, false, 0, false, 0, false, wp_FirmwareVersion_init_default, false, _wp_OnOffState_MIN, false, wp_ScratchpadInfo_init_default, false, _wp_ScratchpadStatus_MIN, false, _wp_ScratchpadType_MIN, false, wp_ScratchpadInfo_init_default, false, 0, false, wp_TargetScratchpadAndAction_init_default}
#define wp_SinkNewConfig_init_default            {"", false, wp_NodeRole_init_default, false, 0, false, 0, false, 0, false, wp_AppConfigData_init_default, false, 0, false, wp_NetworkKeys_init_default, false, wp_AccessCycleRange_init_default, false, _wp_OnOffState_MIN}
#define wp_GatewayInfo_init_default              {0, false, "", false, "", false, 0, false, 0}
#define wp_StatusEvent_init_default              {wp_EventHeader_init_default, 0, _wp_OnOffState_MIN, 0, {wp_SinkReadConfig_init_default}, false, "", false, "", false, 0}
#define wp_GetConfigsReq_init_default            {wp_RequestHeader_init_default}
#define wp_GetConfigsResp_init_default           {wp_ResponseHeader_init_default, 0, {wp_SinkReadConfig_init_default}}
#define wp_SetConfigReq_init_default             {wp_RequestHeader_init_default, wp_SinkNewConfig_init_default}
#define wp_SetConfigResp_init_default            {wp_ResponseHeader_init_default, wp_SinkReadConfig_init_default}
#define wp_GetGwInfoReq_init_default             {wp_RequestHeader_init_default}
#define wp_GetGwInfoResp_init_default            {wp_ResponseHeader_init_default, wp_GatewayInfo_init_default}
#define wp_NodeRole_init_zero                    {_wp_NodeRole_BaseRole_MIN, 0, {_wp_NodeRole_RoleFlags_MIN, _wp_NodeRole_RoleFlags_MIN}}
#define wp_AccessCycleRange_init_zero            {0, 0}
#define wp_ChannelRange_init_zero                {0, 0}
#define wp_AppConfigData_init_zero               {0, {0, {0}}, 0}
#define wp_NetworkKeys_init_zero                 {{0}, {0}}
#define wp_SinkReadConfig_init_zero              {"", false, wp_NodeRole_init_zero, false, 0, false, 0, false, 0, false, wp_AppConfigData_init_zero, false, 0, false, 0, false, wp_AccessCycleRange_init_zero, false, wp_AccessCycleRange_init_zero, false, 0, false, wp_ChannelRange_init_zero, false, 0, false, 0, false, 0, false, wp_FirmwareVersion_init_zero, false, _wp_OnOffState_MIN, false, wp_ScratchpadInfo_init_zero, false, _wp_ScratchpadStatus_MIN, false, _wp_ScratchpadType_MIN, false, wp_ScratchpadInfo_init_zero, false, 0, false, wp_TargetScratchpadAndAction_init_zero}
#define wp_SinkNewConfig_init_zero               {"", false, wp_NodeRole_init_zero, false, 0, false, 0, false, 0, false, wp_AppConfigData_init_zero, false, 0, false, wp_NetworkKeys_init_zero, false, wp_AccessCycleRange_init_zero, false, _wp_OnOffState_MIN}
#define wp_GatewayInfo_init_zero                 {0, false, "", false, "", false, 0, false, 0}
#define wp_StatusEvent_init_zero                 {wp_EventHeader_init_zero, 0, _wp_OnOffState_MIN, 0, {wp_SinkReadConfig_init_zero}, false, "", false, "", false, 0}
#define wp_GetConfigsReq_init_zero               {wp_RequestHeader_init_zero}
#define wp_GetConfigsResp_init_zero              {wp_ResponseHeader_init_zero, 0, {wp_SinkReadConfig_init_zero}}
#define wp_SetConfigReq_init_zero                {wp_RequestHeader_init_zero, wp_SinkNewConfig_init_zero}
#define wp_SetConfigResp_init_zero               {wp_ResponseHeader_init_zero, wp_SinkReadConfig_init_zero}
#define wp_GetGwInfoReq_init_zero                {wp_RequestHeader_init_zero}
#define wp_GetGwInfoResp_init_zero               {wp_ResponseHeader_init_zero, wp_GatewayInfo_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define wp_NodeRole_role_tag                     1
#define wp_NodeRole_flags_tag                    2
#define wp_AccessCycleRange_min_ms_tag           1
#define wp_AccessCycleRange_max_ms_tag           2
#define wp_ChannelRange_min_channel_tag          1
#define wp_ChannelRange_max_channel_tag          2
#define wp_AppConfigData_diag_interval_s_tag     1
#define wp_AppConfigData_app_config_data_tag     2
#define wp_AppConfigData_seq_tag                 3
#define wp_NetworkKeys_cipher_tag                1
#define wp_NetworkKeys_authentication_tag        2
#define wp_SinkReadConfig_sink_id_tag            1
#define wp_SinkReadConfig_node_role_tag          2
#define wp_SinkReadConfig_node_address_tag       3
#define wp_SinkReadConfig_network_address_tag    4
#define wp_SinkReadConfig_network_channel_tag    5
#define wp_SinkReadConfig_app_config_tag         6
#define wp_SinkReadConfig_channel_map_tag        7
#define wp_SinkReadConfig_are_keys_set_tag       8
#define wp_SinkReadConfig_current_ac_range_tag   9
#define wp_SinkReadConfig_ac_limits_tag          10
#define wp_SinkReadConfig_max_mtu_tag            11
#define wp_SinkReadConfig_channel_limits_tag     12
#define wp_SinkReadConfig_hw_magic_tag           13
#define wp_SinkReadConfig_stack_profile_tag      14
#define wp_SinkReadConfig_app_config_max_size_tag 15
#define wp_SinkReadConfig_firmware_version_tag   16
#define wp_SinkReadConfig_sink_state_tag         17
#define wp_SinkReadConfig_stored_scratchpad_tag  18
#define wp_SinkReadConfig_stored_status_tag      19
#define wp_SinkReadConfig_stored_type_tag        20
#define wp_SinkReadConfig_processed_scratchpad_tag 21
#define wp_SinkReadConfig_firmware_area_id_tag   22
#define wp_SinkReadConfig_target_and_action_tag  23
#define wp_SinkNewConfig_sink_id_tag             1
#define wp_SinkNewConfig_node_role_tag           2
#define wp_SinkNewConfig_node_address_tag        3
#define wp_SinkNewConfig_network_address_tag     4
#define wp_SinkNewConfig_network_channel_tag     5
#define wp_SinkNewConfig_app_config_tag          6
#define wp_SinkNewConfig_channel_map_tag         7
#define wp_SinkNewConfig_keys_tag                8
#define wp_SinkNewConfig_current_ac_range_tag    9
#define wp_SinkNewConfig_sink_state_tag          10
#define wp_GatewayInfo_current_time_s_epoch_tag  1
#define wp_GatewayInfo_gw_model_tag              2
#define wp_GatewayInfo_gw_version_tag            3
#define wp_GatewayInfo_implemented_api_version_tag 4
#define wp_GatewayInfo_max_scratchpad_size_tag   5
#define wp_StatusEvent_header_tag                1
#define wp_StatusEvent_version_tag               2
#define wp_StatusEvent_state_tag                 3
#define wp_StatusEvent_configs_tag               4
#define wp_StatusEvent_gw_model_tag              5
#define wp_StatusEvent_gw_version_tag            6
#define wp_StatusEvent_max_scratchpad_size_tag   7
#define wp_GetConfigsReq_header_tag              1
#define wp_GetConfigsResp_header_tag             1
#define wp_GetConfigsResp_configs_tag            2
#define wp_SetConfigReq_header_tag               1
#define wp_SetConfigReq_config_tag               2
#define wp_SetConfigResp_header_tag              1
#define wp_SetConfigResp_config_tag              2
#define wp_GetGwInfoReq_header_tag               1
#define wp_GetGwInfoResp_header_tag              1
#define wp_GetGwInfoResp_info_tag                2

/* Struct field encoding specification for nanopb */
#define wp_NodeRole_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    role,              1) \
X(a, STATIC,   REPEATED, UENUM,    flags,             2)
#define wp_NodeRole_CALLBACK NULL
#define wp_NodeRole_DEFAULT (const pb_byte_t*)"\x08\x01\x00"

#define wp_AccessCycleRange_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   min_ms,            1) \
X(a, STATIC,   REQUIRED, UINT32,   max_ms,            2)
#define wp_AccessCycleRange_CALLBACK NULL
#define wp_AccessCycleRange_DEFAULT NULL

#define wp_ChannelRange_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   min_channel,       1) \
X(a, STATIC,   REQUIRED, UINT32,   max_channel,       2)
#define wp_ChannelRange_CALLBACK NULL
#define wp_ChannelRange_DEFAULT NULL

#define wp_AppConfigData_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   diag_interval_s,   1) \
X(a, STATIC,   REQUIRED, BYTES,    app_config_data,   2) \
X(a, STATIC,   REQUIRED, UINT32,   seq,               3)
#define wp_AppConfigData_CALLBACK NULL
#define wp_AppConfigData_DEFAULT NULL

#define wp_NetworkKeys_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FIXED_LENGTH_BYTES, cipher,            1) \
X(a, STATIC,   REQUIRED, FIXED_LENGTH_BYTES, authentication,    2)
#define wp_NetworkKeys_CALLBACK NULL
#define wp_NetworkKeys_DEFAULT NULL

#define wp_SinkReadConfig_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   sink_id,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  node_role,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   node_address,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   network_address,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   network_channel,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  app_config,        6) \
X(a, STATIC,   OPTIONAL, UINT32,   channel_map,       7) \
X(a, STATIC,   OPTIONAL, BOOL,     are_keys_set,      8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  current_ac_range,   9) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ac_limits,        10) \
X(a, STATIC,   OPTIONAL, UINT32,   max_mtu,          11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  channel_limits,   12) \
X(a, STATIC,   OPTIONAL, UINT32,   hw_magic,         13) \
X(a, STATIC,   OPTIONAL, UINT32,   stack_profile,    14) \
X(a, STATIC,   OPTIONAL, UINT32,   app_config_max_size,  15) \
X(a, STATIC,   OPTIONAL, MESSAGE,  firmware_version,  16) \
X(a, STATIC,   OPTIONAL, UENUM,    sink_state,       17) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stored_scratchpad,  18) \
X(a, STATIC,   OPTIONAL, UENUM,    stored_status,    19) \
X(a, STATIC,   OPTIONAL, UENUM,    stored_type,      20) \
X(a, STATIC,   OPTIONAL, MESSAGE,  processed_scratchpad,  21) \
X(a, STATIC,   OPTIONAL, UINT32,   firmware_area_id,  22) \
X(a, STATIC,   OPTIONAL, MESSAGE,  target_and_action,  23)
#define wp_SinkReadConfig_CALLBACK NULL
#define wp_SinkReadConfig_DEFAULT (const pb_byte_t*)"\x88\x01\x01\x98\x01\x01\xa0\x01\x01\x00"
#define wp_SinkReadConfig_node_role_MSGTYPE wp_NodeRole
#define wp_SinkReadConfig_app_config_MSGTYPE wp_AppConfigData
#define wp_SinkReadConfig_current_ac_range_MSGTYPE wp_AccessCycleRange
#define wp_SinkReadConfig_ac_limits_MSGTYPE wp_AccessCycleRange
#define wp_SinkReadConfig_channel_limits_MSGTYPE wp_ChannelRange
#define wp_SinkReadConfig_firmware_version_MSGTYPE wp_FirmwareVersion
#define wp_SinkReadConfig_stored_scratchpad_MSGTYPE wp_ScratchpadInfo
#define wp_SinkReadConfig_processed_scratchpad_MSGTYPE wp_ScratchpadInfo
#define wp_SinkReadConfig_target_and_action_MSGTYPE wp_TargetScratchpadAndAction

#define wp_SinkNewConfig_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   sink_id,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  node_role,         2) \
X(a, STATIC,   OPTIONAL, UINT32,   node_address,      3) \
X(a, STATIC,   OPTIONAL, UINT64,   network_address,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   network_channel,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  app_config,        6) \
X(a, STATIC,   OPTIONAL, UINT32,   channel_map,       7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  keys,              8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  current_ac_range,   9) \
X(a, STATIC,   OPTIONAL, UENUM,    sink_state,       10)
#define wp_SinkNewConfig_CALLBACK NULL
#define wp_SinkNewConfig_DEFAULT (const pb_byte_t*)"\x50\x01\x00"
#define wp_SinkNewConfig_node_role_MSGTYPE wp_NodeRole
#define wp_SinkNewConfig_app_config_MSGTYPE wp_AppConfigData
#define wp_SinkNewConfig_keys_MSGTYPE wp_NetworkKeys
#define wp_SinkNewConfig_current_ac_range_MSGTYPE wp_AccessCycleRange

#define wp_GatewayInfo_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT64,   current_time_s_epoch,   1) \
X(a, STATIC,   OPTIONAL, STRING,   gw_model,          2) \
X(a, STATIC,   OPTIONAL, STRING,   gw_version,        3) \
X(a, STATIC,   OPTIONAL, UINT32,   implemented_api_version,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   max_scratchpad_size,   5)
#define wp_GatewayInfo_CALLBACK NULL
#define wp_GatewayInfo_DEFAULT NULL

#define wp_StatusEvent_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, UINT32,   version,           2) \
X(a, STATIC,   REQUIRED, UENUM,    state,             3) \
X(a, STATIC,   REPEATED, MESSAGE,  configs,           4) \
X(a, STATIC,   OPTIONAL, STRING,   gw_model,          5) \
X(a, STATIC,   OPTIONAL, STRING,   gw_version,        6) \
X(a, STATIC,   OPTIONAL, UINT32,   max_scratchpad_size,   7)
#define wp_StatusEvent_CALLBACK NULL
#define wp_StatusEvent_DEFAULT (const pb_byte_t*)"\x18\x01\x00"
#define wp_StatusEvent_header_MSGTYPE wp_EventHeader
#define wp_StatusEvent_configs_MSGTYPE wp_SinkReadConfig

#define wp_GetConfigsReq_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1)
#define wp_GetConfigsReq_CALLBACK NULL
#define wp_GetConfigsReq_DEFAULT NULL
#define wp_GetConfigsReq_header_MSGTYPE wp_RequestHeader

#define wp_GetConfigsResp_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REPEATED, MESSAGE,  configs,           2)
#define wp_GetConfigsResp_CALLBACK NULL
#define wp_GetConfigsResp_DEFAULT NULL
#define wp_GetConfigsResp_header_MSGTYPE wp_ResponseHeader
#define wp_GetConfigsResp_configs_MSGTYPE wp_SinkReadConfig

#define wp_SetConfigReq_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, MESSAGE,  config,            2)
#define wp_SetConfigReq_CALLBACK NULL
#define wp_SetConfigReq_DEFAULT NULL
#define wp_SetConfigReq_header_MSGTYPE wp_RequestHeader
#define wp_SetConfigReq_config_MSGTYPE wp_SinkNewConfig

#define wp_SetConfigResp_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, MESSAGE,  config,            2)
#define wp_SetConfigResp_CALLBACK NULL
#define wp_SetConfigResp_DEFAULT NULL
#define wp_SetConfigResp_header_MSGTYPE wp_ResponseHeader
#define wp_SetConfigResp_config_MSGTYPE wp_SinkReadConfig

#define wp_GetGwInfoReq_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1)
#define wp_GetGwInfoReq_CALLBACK NULL
#define wp_GetGwInfoReq_DEFAULT NULL
#define wp_GetGwInfoReq_header_MSGTYPE wp_RequestHeader

#define wp_GetGwInfoResp_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, MESSAGE,  info,              2)
#define wp_GetGwInfoResp_CALLBACK NULL
#define wp_GetGwInfoResp_DEFAULT NULL
#define wp_GetGwInfoResp_header_MSGTYPE wp_ResponseHeader
#define wp_GetGwInfoResp_info_MSGTYPE wp_GatewayInfo

extern const pb_msgdesc_t wp_NodeRole_msg;
extern const pb_msgdesc_t wp_AccessCycleRange_msg;
extern const pb_msgdesc_t wp_ChannelRange_msg;
extern const pb_msgdesc_t wp_AppConfigData_msg;
extern const pb_msgdesc_t wp_NetworkKeys_msg;
extern const pb_msgdesc_t wp_SinkReadConfig_msg;
extern const pb_msgdesc_t wp_SinkNewConfig_msg;
extern const pb_msgdesc_t wp_GatewayInfo_msg;
extern const pb_msgdesc_t wp_StatusEvent_msg;
extern const pb_msgdesc_t wp_GetConfigsReq_msg;
extern const pb_msgdesc_t wp_GetConfigsResp_msg;
extern const pb_msgdesc_t wp_SetConfigReq_msg;
extern const pb_msgdesc_t wp_SetConfigResp_msg;
extern const pb_msgdesc_t wp_GetGwInfoReq_msg;
extern const pb_msgdesc_t wp_GetGwInfoResp_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define wp_NodeRole_fields &wp_NodeRole_msg
#define wp_AccessCycleRange_fields &wp_AccessCycleRange_msg
#define wp_ChannelRange_fields &wp_ChannelRange_msg
#define wp_AppConfigData_fields &wp_AppConfigData_msg
#define wp_NetworkKeys_fields &wp_NetworkKeys_msg
#define wp_SinkReadConfig_fields &wp_SinkReadConfig_msg
#define wp_SinkNewConfig_fields &wp_SinkNewConfig_msg
#define wp_GatewayInfo_fields &wp_GatewayInfo_msg
#define wp_StatusEvent_fields &wp_StatusEvent_msg
#define wp_GetConfigsReq_fields &wp_GetConfigsReq_msg
#define wp_GetConfigsResp_fields &wp_GetConfigsResp_msg
#define wp_SetConfigReq_fields &wp_SetConfigReq_msg
#define wp_SetConfigResp_fields &wp_SetConfigResp_msg
#define wp_GetGwInfoReq_fields &wp_GetGwInfoReq_msg
#define wp_GetGwInfoResp_fields &wp_GetGwInfoResp_msg

/* Maximum encoded size of messages (where known) */
#define WP_CONFIG_MESSAGE_PB_H_MAX_SIZE          wp_StatusEvent_size
#define wp_AccessCycleRange_size                 12
#define wp_AppConfigData_size                    94
#define wp_ChannelRange_size                     12
#define wp_GatewayInfo_size                      121
#define wp_GetConfigsReq_size                    41
#define wp_GetConfigsResp_size                   415
#define wp_GetGwInfoReq_size                     41
#define wp_GetGwInfoResp_size                    208
#define wp_NetworkKeys_size                      36
#define wp_NodeRole_size                         6
#define wp_SetConfigReq_size                     248
#define wp_SetConfigResp_size                    414
#define wp_SinkNewConfig_size                    204
#define wp_SinkReadConfig_size                   326
#define wp_StatusEvent_size                      516

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
