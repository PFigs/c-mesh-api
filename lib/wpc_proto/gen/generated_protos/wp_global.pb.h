/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_WP_WP_GLOBAL_PB_H_INCLUDED
#define PB_WP_WP_GLOBAL_PB_H_INCLUDED
#include <pb.h>
#include "error.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _wp_OnOffState {
    wp_OnOffState_ON = 1,
    wp_OnOffState_OFF = 2
} wp_OnOffState;

typedef enum _wp_ScratchpadType {
    wp_ScratchpadType_BLANK = 1,
    wp_ScratchpadType_PRESENT = 2,
    wp_ScratchpadType_PROCESS = 3
} wp_ScratchpadType;

typedef enum _wp_ScratchpadStatus {
    wp_ScratchpadStatus_SUCCESS = 1,
    wp_ScratchpadStatus_NEW = 2,
    wp_ScratchpadStatus_ERROR = 3
} wp_ScratchpadStatus;

typedef enum _wp_ScratchpadAction {
    /* Will be the default value in case it is later extended */
    wp_ScratchpadAction_UNKNOWN_ACTION = 0,
    /* No propagation, no processing of scratchpad */
    wp_ScratchpadAction_NO_OTAP = 1,
    /* Propagate the target scratchpad but no processing */
    wp_ScratchpadAction_PROPAGATE_ONLY = 2,
    /* Propagate the target scratchpad and process it as soon as received */
    wp_ScratchpadAction_PROPAGATE_AND_PROCESS = 3,
    /* Propagate the target scratchpad and process it after delay (starting when scratchpad is present and this info received) */
    wp_ScratchpadAction_PROPAGATE_AND_PROCESS_WITH_DELAY = 4,
    /* Otap propagation works as before with sequence comparison and processing through remote API */
    wp_ScratchpadAction_LEGACY_OTAP = 5
} wp_ScratchpadAction;

typedef enum _wp_ProcessingDelay {
    wp_ProcessingDelay_UNKNOWN_DELAY = 0,
    wp_ProcessingDelay_TEN_MINUTES = 1,
    wp_ProcessingDelay_THIRTY_MINUTES = 2,
    wp_ProcessingDelay_ONE_HOUR = 3,
    wp_ProcessingDelay_SIX_HOURS = 4,
    wp_ProcessingDelay_ONE_DAY = 5,
    wp_ProcessingDelay_TWO_DAYS = 6,
    wp_ProcessingDelay_FIVE_DAYS = 7
} wp_ProcessingDelay;

/* Struct definitions */
/* Global request header
 NB: Gateway id is not present in header as gateway will only subscribe to their id */
typedef struct _wp_RequestHeader {
    /* Unique request id */
    uint64_t req_id;
    /* Sink id if relevant for request */
    bool has_sink_id;
    char sink_id[16];
    /* Timestamp for the request generation */
    bool has_time_ms_epoch;
    uint64_t time_ms_epoch;
} wp_RequestHeader;

typedef struct _wp_ResponseHeader {
    /* Same as in Request */
    uint64_t req_id;
    /* Gw id that handled the request */
    char gw_id[32];
    /* Sink id if relevant for request */
    bool has_sink_id;
    char sink_id[16];
    /* Global result of request */
    wp_ErrorCode res;
    /* Timestamp for the response generation */
    bool has_time_ms_epoch;
    uint64_t time_ms_epoch;
} wp_ResponseHeader;

typedef struct _wp_EventHeader {
    /* Gw id that generated the event */
    char gw_id[32];
    /* Sink id if relevant for event */
    bool has_sink_id;
    char sink_id[16];
    /* Random event id to help duplicate event filtering */
    uint64_t event_id;
    /* Timestamp for the event generation */
    bool has_time_ms_epoch;
    uint64_t time_ms_epoch;
} wp_EventHeader;

typedef struct _wp_FirmwareVersion {
    uint32_t major;
    uint32_t minor;
    uint32_t maint;
    uint32_t dev;
} wp_FirmwareVersion;

typedef struct _wp_ScratchpadInfo {
    uint32_t len;
    uint32_t crc;
    uint32_t seq;
} wp_ScratchpadInfo;

typedef struct _wp_TargetScratchpadAndAction {
    wp_ScratchpadAction action; /* What is the action to perform with the current scratchpad */
    bool has_target_sequence;
    uint32_t target_sequence; /* Between 1 and 254 (if missing using local scratchpad sequence if present) */
    bool has_target_crc;
    uint32_t target_crc; /* Between 0 and 0xffff (if missing using local scratchpad CRC if present) */
    pb_size_t which_param;
    union {
        wp_ProcessingDelay delay; /* Delay parameter for action PROPAGATE_AND_PROCESS_WITH_DELAY */
        uint32_t raw; /* Raw parameter for the action (between 0 and 255) */
    } param;
} wp_TargetScratchpadAndAction;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _wp_OnOffState_MIN wp_OnOffState_ON
#define _wp_OnOffState_MAX wp_OnOffState_OFF
#define _wp_OnOffState_ARRAYSIZE ((wp_OnOffState)(wp_OnOffState_OFF+1))

#define _wp_ScratchpadType_MIN wp_ScratchpadType_BLANK
#define _wp_ScratchpadType_MAX wp_ScratchpadType_PROCESS
#define _wp_ScratchpadType_ARRAYSIZE ((wp_ScratchpadType)(wp_ScratchpadType_PROCESS+1))

#define _wp_ScratchpadStatus_MIN wp_ScratchpadStatus_SUCCESS
#define _wp_ScratchpadStatus_MAX wp_ScratchpadStatus_ERROR
#define _wp_ScratchpadStatus_ARRAYSIZE ((wp_ScratchpadStatus)(wp_ScratchpadStatus_ERROR+1))

#define _wp_ScratchpadAction_MIN wp_ScratchpadAction_UNKNOWN_ACTION
#define _wp_ScratchpadAction_MAX wp_ScratchpadAction_LEGACY_OTAP
#define _wp_ScratchpadAction_ARRAYSIZE ((wp_ScratchpadAction)(wp_ScratchpadAction_LEGACY_OTAP+1))

#define _wp_ProcessingDelay_MIN wp_ProcessingDelay_UNKNOWN_DELAY
#define _wp_ProcessingDelay_MAX wp_ProcessingDelay_FIVE_DAYS
#define _wp_ProcessingDelay_ARRAYSIZE ((wp_ProcessingDelay)(wp_ProcessingDelay_FIVE_DAYS+1))


#define wp_ResponseHeader_res_ENUMTYPE wp_ErrorCode




#define wp_TargetScratchpadAndAction_action_ENUMTYPE wp_ScratchpadAction
#define wp_TargetScratchpadAndAction_param_delay_ENUMTYPE wp_ProcessingDelay


/* Initializer values for message structs */
#define wp_RequestHeader_init_default            {0, false, "", false, 0}
#define wp_ResponseHeader_init_default           {0, "", false, "", _wp_ErrorCode_MIN, false, 0}
#define wp_EventHeader_init_default              {"", false, "", 0, false, 0}
#define wp_FirmwareVersion_init_default          {0, 0, 0, 0}
#define wp_ScratchpadInfo_init_default           {0, 0, 0}
#define wp_TargetScratchpadAndAction_init_default {_wp_ScratchpadAction_MIN, false, 0, false, 0, 0, {_wp_ProcessingDelay_MIN}}
#define wp_RequestHeader_init_zero               {0, false, "", false, 0}
#define wp_ResponseHeader_init_zero              {0, "", false, "", _wp_ErrorCode_MIN, false, 0}
#define wp_EventHeader_init_zero                 {"", false, "", 0, false, 0}
#define wp_FirmwareVersion_init_zero             {0, 0, 0, 0}
#define wp_ScratchpadInfo_init_zero              {0, 0, 0}
#define wp_TargetScratchpadAndAction_init_zero   {_wp_ScratchpadAction_MIN, false, 0, false, 0, 0, {_wp_ProcessingDelay_MIN}}

/* Field tags (for use in manual encoding/decoding) */
#define wp_RequestHeader_req_id_tag              1
#define wp_RequestHeader_sink_id_tag             2
#define wp_RequestHeader_time_ms_epoch_tag       3
#define wp_ResponseHeader_req_id_tag             1
#define wp_ResponseHeader_gw_id_tag              2
#define wp_ResponseHeader_sink_id_tag            3
#define wp_ResponseHeader_res_tag                4
#define wp_ResponseHeader_time_ms_epoch_tag      5
#define wp_EventHeader_gw_id_tag                 1
#define wp_EventHeader_sink_id_tag               2
#define wp_EventHeader_event_id_tag              3
#define wp_EventHeader_time_ms_epoch_tag         4
#define wp_FirmwareVersion_major_tag             1
#define wp_FirmwareVersion_minor_tag             2
#define wp_FirmwareVersion_maint_tag             3
#define wp_FirmwareVersion_dev_tag               4
#define wp_ScratchpadInfo_len_tag                1
#define wp_ScratchpadInfo_crc_tag                2
#define wp_ScratchpadInfo_seq_tag                3
#define wp_TargetScratchpadAndAction_action_tag  1
#define wp_TargetScratchpadAndAction_target_sequence_tag 2
#define wp_TargetScratchpadAndAction_target_crc_tag 3
#define wp_TargetScratchpadAndAction_delay_tag   4
#define wp_TargetScratchpadAndAction_raw_tag     5

/* Struct field encoding specification for nanopb */
#define wp_RequestHeader_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT64,   req_id,            1) \
X(a, STATIC,   OPTIONAL, STRING,   sink_id,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   time_ms_epoch,     3)
#define wp_RequestHeader_CALLBACK NULL
#define wp_RequestHeader_DEFAULT NULL

#define wp_ResponseHeader_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT64,   req_id,            1) \
X(a, STATIC,   REQUIRED, STRING,   gw_id,             2) \
X(a, STATIC,   OPTIONAL, STRING,   sink_id,           3) \
X(a, STATIC,   REQUIRED, ENUM,     res,               4) \
X(a, STATIC,   OPTIONAL, UINT64,   time_ms_epoch,     5)
#define wp_ResponseHeader_CALLBACK NULL
#define wp_ResponseHeader_DEFAULT (const pb_byte_t*)"\x20\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00"

#define wp_EventHeader_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   gw_id,             1) \
X(a, STATIC,   OPTIONAL, STRING,   sink_id,           2) \
X(a, STATIC,   REQUIRED, UINT64,   event_id,          3) \
X(a, STATIC,   OPTIONAL, UINT64,   time_ms_epoch,     4)
#define wp_EventHeader_CALLBACK NULL
#define wp_EventHeader_DEFAULT NULL

#define wp_FirmwareVersion_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   major,             1) \
X(a, STATIC,   REQUIRED, UINT32,   minor,             2) \
X(a, STATIC,   REQUIRED, UINT32,   maint,             3) \
X(a, STATIC,   REQUIRED, UINT32,   dev,               4)
#define wp_FirmwareVersion_CALLBACK NULL
#define wp_FirmwareVersion_DEFAULT NULL

#define wp_ScratchpadInfo_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   len,               1) \
X(a, STATIC,   REQUIRED, UINT32,   crc,               2) \
X(a, STATIC,   REQUIRED, UINT32,   seq,               3)
#define wp_ScratchpadInfo_CALLBACK NULL
#define wp_ScratchpadInfo_DEFAULT NULL

#define wp_TargetScratchpadAndAction_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    action,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   target_sequence,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   target_crc,        3) \
X(a, STATIC,   ONEOF,    UENUM,    (param,delay,param.delay),   4) \
X(a, STATIC,   ONEOF,    UINT32,   (param,raw,param.raw),   5)
#define wp_TargetScratchpadAndAction_CALLBACK NULL
#define wp_TargetScratchpadAndAction_DEFAULT NULL

extern const pb_msgdesc_t wp_RequestHeader_msg;
extern const pb_msgdesc_t wp_ResponseHeader_msg;
extern const pb_msgdesc_t wp_EventHeader_msg;
extern const pb_msgdesc_t wp_FirmwareVersion_msg;
extern const pb_msgdesc_t wp_ScratchpadInfo_msg;
extern const pb_msgdesc_t wp_TargetScratchpadAndAction_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define wp_RequestHeader_fields &wp_RequestHeader_msg
#define wp_ResponseHeader_fields &wp_ResponseHeader_msg
#define wp_EventHeader_fields &wp_EventHeader_msg
#define wp_FirmwareVersion_fields &wp_FirmwareVersion_msg
#define wp_ScratchpadInfo_fields &wp_ScratchpadInfo_msg
#define wp_TargetScratchpadAndAction_fields &wp_TargetScratchpadAndAction_msg

/* Maximum encoded size of messages (where known) */
#define WP_WP_GLOBAL_PB_H_MAX_SIZE               wp_ResponseHeader_size
#define wp_EventHeader_size                      72
#define wp_FirmwareVersion_size                  24
#define wp_RequestHeader_size                    39
#define wp_ResponseHeader_size                   83
#define wp_ScratchpadInfo_size                   18
#define wp_TargetScratchpadAndAction_size        20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
